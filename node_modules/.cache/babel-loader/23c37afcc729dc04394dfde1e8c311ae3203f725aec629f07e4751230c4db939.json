{"ast":null,"code":"// Body scroll manager to prevent conflicts between multiple modals\nclass BodyScrollManager{constructor(){this.lockCount=0;this.originalOverflow='';}lock(){if(this.lockCount===0){// Store original overflow value\nthis.originalOverflow=document.body.style.overflow||'';document.body.style.overflow='hidden';}this.lockCount++;}unlock(){this.lockCount=Math.max(0,this.lockCount-1);if(this.lockCount===0){// Restore original overflow value\ndocument.body.style.overflow=this.originalOverflow;}}// Force unlock (for cleanup)\nforceUnlock(){console.log('Force unlocking body scroll, lockCount was:',this.lockCount);this.lockCount=0;document.body.style.overflow=this.originalOverflow||'';console.log('Body overflow reset to:',document.body.style.overflow);}// Debug method\ngetStatus(){return{lockCount:this.lockCount,currentOverflow:document.body.style.overflow,originalOverflow:this.originalOverflow};}}// Create singleton instance\nconst bodyScrollManager=new BodyScrollManager();export default bodyScrollManager;","map":{"version":3,"names":["BodyScrollManager","constructor","lockCount","originalOverflow","lock","document","body","style","overflow","unlock","Math","max","forceUnlock","console","log","getStatus","currentOverflow","bodyScrollManager"],"sources":["/Users/renzoservera/Desktop/referral-network-react/src/utils/bodyScrollManager.js"],"sourcesContent":["// Body scroll manager to prevent conflicts between multiple modals\nclass BodyScrollManager {\n  constructor() {\n    this.lockCount = 0;\n    this.originalOverflow = '';\n  }\n\n  lock() {\n    if (this.lockCount === 0) {\n      // Store original overflow value\n      this.originalOverflow = document.body.style.overflow || '';\n      document.body.style.overflow = 'hidden';\n    }\n    this.lockCount++;\n  }\n\n  unlock() {\n    this.lockCount = Math.max(0, this.lockCount - 1);\n    \n    if (this.lockCount === 0) {\n      // Restore original overflow value\n      document.body.style.overflow = this.originalOverflow;\n    }\n  }\n\n  // Force unlock (for cleanup)\n  forceUnlock() {\n    console.log('Force unlocking body scroll, lockCount was:', this.lockCount);\n    this.lockCount = 0;\n    document.body.style.overflow = this.originalOverflow || '';\n    console.log('Body overflow reset to:', document.body.style.overflow);\n  }\n\n  // Debug method\n  getStatus() {\n    return {\n      lockCount: this.lockCount,\n      currentOverflow: document.body.style.overflow,\n      originalOverflow: this.originalOverflow\n    };\n  }\n}\n\n// Create singleton instance\nconst bodyScrollManager = new BodyScrollManager();\n\nexport default bodyScrollManager;"],"mappings":"AAAA;AACA,KAAM,CAAAA,iBAAkB,CACtBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,SAAS,CAAG,CAAC,CAClB,IAAI,CAACC,gBAAgB,CAAG,EAAE,CAC5B,CAEAC,IAAIA,CAAA,CAAG,CACL,GAAI,IAAI,CAACF,SAAS,GAAK,CAAC,CAAE,CACxB;AACA,IAAI,CAACC,gBAAgB,CAAGE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAI,EAAE,CAC1DH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAG,QAAQ,CACzC,CACA,IAAI,CAACN,SAAS,EAAE,CAClB,CAEAO,MAAMA,CAAA,CAAG,CACP,IAAI,CAACP,SAAS,CAAGQ,IAAI,CAACC,GAAG,CAAC,CAAC,CAAE,IAAI,CAACT,SAAS,CAAG,CAAC,CAAC,CAEhD,GAAI,IAAI,CAACA,SAAS,GAAK,CAAC,CAAE,CACxB;AACAG,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAG,IAAI,CAACL,gBAAgB,CACtD,CACF,CAEA;AACAS,WAAWA,CAAA,CAAG,CACZC,OAAO,CAACC,GAAG,CAAC,6CAA6C,CAAE,IAAI,CAACZ,SAAS,CAAC,CAC1E,IAAI,CAACA,SAAS,CAAG,CAAC,CAClBG,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAG,IAAI,CAACL,gBAAgB,EAAI,EAAE,CAC1DU,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAET,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAAC,CACtE,CAEA;AACAO,SAASA,CAAA,CAAG,CACV,MAAO,CACLb,SAAS,CAAE,IAAI,CAACA,SAAS,CACzBc,eAAe,CAAEX,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,CAC7CL,gBAAgB,CAAE,IAAI,CAACA,gBACzB,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAc,iBAAiB,CAAG,GAAI,CAAAjB,iBAAiB,CAAC,CAAC,CAEjD,cAAe,CAAAiB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}