{"ast":null,"code":"var _jsxFileName = \"/Users/renzoservera/Desktop/referral-network-react/src/components/Icon/Icon.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Icon = ({\n  name,\n  size = 24,\n  className = '',\n  ...props\n}) => {\n  _s();\n  const [svgContent, setSvgContent] = React.useState(null);\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n  React.useEffect(() => {\n    const loadSvg = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n\n        // Import the SVG file as a URL and fetch its content\n        const svgModule = await import(`../../assets/icons/${name}.svg`);\n        const svgUrl = svgModule.default;\n\n        // Fetch the SVG content\n        const response = await fetch(svgUrl);\n        const svgText = await response.text();\n\n        // Create a parser to extract the SVG content\n        const parser = new DOMParser();\n        const svgDoc = parser.parseFromString(svgText, 'image/svg+xml');\n        const svgElement = svgDoc.querySelector('svg');\n        if (svgElement) {\n          // Extract viewBox and paths\n          const viewBox = svgElement.getAttribute('viewBox');\n          const paths = svgElement.querySelectorAll('path');\n          const pathData = Array.from(paths).map(path => ({\n            d: path.getAttribute('d'),\n            fill: path.getAttribute('fill') || 'currentColor',\n            fillOpacity: path.getAttribute('fillOpacity') || path.getAttribute('fill-opacity') || '1'\n          }));\n          setSvgContent({\n            viewBox,\n            paths: pathData\n          });\n        } else {\n          throw new Error('Invalid SVG');\n        }\n        setLoading(false);\n      } catch (err) {\n        console.warn(`Icon \"${name}\" not found or invalid in assets/icons/ folder`);\n        setError(true);\n        setLoading(false);\n        setSvgContent(null);\n      }\n    };\n    loadSvg();\n  }, [name]);\n  if (error) {\n    // Fallback: render a simple placeholder\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `icon-wrapper icon-placeholder ${className}`,\n      style: {\n        width: size,\n        height: size,\n        backgroundColor: 'currentColor',\n        opacity: 0.3,\n        borderRadius: '2px',\n        display: 'inline-block'\n      },\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n  if (loading || !svgContent) {\n    // Loading state\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `icon-wrapper icon-loading ${className}`,\n      style: {\n        width: size,\n        height: size,\n        backgroundColor: 'currentColor',\n        opacity: 0.1,\n        borderRadius: '2px',\n        display: 'inline-block'\n      },\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `icon-wrapper ${className}`,\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: size,\n      height: size,\n      viewBox: svgContent.viewBox,\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      style: {\n        display: 'block'\n      },\n      children: svgContent.paths.map((pathData, index) => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: pathData.d,\n        fill: pathData.fill,\n        fillOpacity: pathData.fillOpacity\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Icon, \"NFO4RhG6OeS0cw3FwlCnaTtMwKo=\");\n_c = Icon;\nexport default Icon;\nvar _c;\n$RefreshReg$(_c, \"Icon\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Icon","name","size","className","props","_s","svgContent","setSvgContent","useState","error","setError","loading","setLoading","useEffect","loadSvg","svgModule","svgUrl","default","response","fetch","svgText","text","parser","DOMParser","svgDoc","parseFromString","svgElement","querySelector","viewBox","getAttribute","paths","querySelectorAll","pathData","Array","from","map","path","d","fill","fillOpacity","Error","err","console","warn","style","width","height","backgroundColor","opacity","borderRadius","display","fileName","_jsxFileName","lineNumber","columnNumber","children","xmlns","index","_c","$RefreshReg$"],"sources":["/Users/renzoservera/Desktop/referral-network-react/src/components/Icon/Icon.jsx"],"sourcesContent":["import React from 'react';\n\nconst Icon = ({ name, size = 24, className = '', ...props }) => {\n  const [svgContent, setSvgContent] = React.useState(null);\n  const [error, setError] = React.useState(false);\n  const [loading, setLoading] = React.useState(true);\n\n  React.useEffect(() => {\n    const loadSvg = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        \n        // Import the SVG file as a URL and fetch its content\n        const svgModule = await import(`../../assets/icons/${name}.svg`);\n        const svgUrl = svgModule.default;\n        \n        // Fetch the SVG content\n        const response = await fetch(svgUrl);\n        const svgText = await response.text();\n        \n        // Create a parser to extract the SVG content\n        const parser = new DOMParser();\n        const svgDoc = parser.parseFromString(svgText, 'image/svg+xml');\n        const svgElement = svgDoc.querySelector('svg');\n        \n        if (svgElement) {\n          // Extract viewBox and paths\n          const viewBox = svgElement.getAttribute('viewBox');\n          const paths = svgElement.querySelectorAll('path');\n          const pathData = Array.from(paths).map(path => ({\n            d: path.getAttribute('d'),\n            fill: path.getAttribute('fill') || 'currentColor',\n            fillOpacity: path.getAttribute('fillOpacity') || path.getAttribute('fill-opacity') || '1'\n          }));\n          \n          setSvgContent({ viewBox, paths: pathData });\n        } else {\n          throw new Error('Invalid SVG');\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.warn(`Icon \"${name}\" not found or invalid in assets/icons/ folder`);\n        setError(true);\n        setLoading(false);\n        setSvgContent(null);\n      }\n    };\n\n    loadSvg();\n  }, [name]);\n\n  if (error) {\n    // Fallback: render a simple placeholder\n    return (\n      <div \n        className={`icon-wrapper icon-placeholder ${className}`} \n        style={{\n          width: size,\n          height: size,\n          backgroundColor: 'currentColor',\n          opacity: 0.3,\n          borderRadius: '2px',\n          display: 'inline-block'\n        }}\n        {...props}\n      />\n    );\n  }\n\n  if (loading || !svgContent) {\n    // Loading state\n    return (\n      <div \n        className={`icon-wrapper icon-loading ${className}`} \n        style={{\n          width: size,\n          height: size,\n          backgroundColor: 'currentColor',\n          opacity: 0.1,\n          borderRadius: '2px',\n          display: 'inline-block'\n        }}\n        {...props}\n      />\n    );\n  }\n\n  return (\n    <div className={`icon-wrapper ${className}`} {...props}>\n      <svg\n        width={size}\n        height={size}\n        viewBox={svgContent.viewBox}\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{ \n          display: 'block'\n        }}\n      >\n        {svgContent.paths.map((pathData, index) => (\n          <path\n            key={index}\n            d={pathData.d}\n            fill={pathData.fill}\n            fillOpacity={pathData.fillOpacity}\n          />\n        ))}\n      </svg>\n    </div>\n  );\n};\n\nexport default Icon;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}